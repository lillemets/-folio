NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(x) any(!is.na(x))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
index.control <- row.names(data[data$treated == 0, ])[unique(unlist(vec))]
index.treated <- row.names(data[data$treated == 1, ])
str(vec)
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(x) any(!is.na(x))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
set.seed(1)
nobs <- 10
df <- data.frame(id = 1:nobs, treated = sample(0:1, nobs, replace = T))
df$propensity <- ifelse(df$treated, rnorm(nobs, .8, .1), rnorm(nobs, .4, .4))
df
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
index.control <- row.names(data[data$treated == 0, ])[unique(unlist(vec))]
index.treated <- row.names(data[data$treated == 1, ])
str(vec)
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(x) any(!is.na(x))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
str(vec)
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(x) any(!is.na(x))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
index.control <- row.names(data[data$treated == 0, ])[unique(unlist(vec))]
index.treated <- row.names(data[data$treated == 1, ])
print(str(vec))
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(x) any(!is.na(x))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
index.control <- row.names(data[data$treated == 0, ])[vec]
index.treated <- row.names(data[data$treated == 1, ])
index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(x) any(!is.na(x))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
index.control <- row.names(data[data$treated == 0, ])[unlist(vec)]
index.treated <- row.names(data[data$treated == 1, ])
index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(x) any(!is.na(x))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
index.control <- unlist(vec)
index.treated <- row.names(data[data$treated == 1, ])
index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(x) any(!is.na(x))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
index.treated <- row.names(data[data$treated == 1, ])
index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(x) any(!is.na(x))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
#    index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
#    index.treated <- row.names(data[data$treated == 1, ])
#    index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(x) any(!is.na(x))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
#    index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
#    index.treated <- row.names(data[data$treated == 1, ])
#    index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(x) any(!is.na(x))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
index.treated <- row.names(data[data$treated == 1, ])
index.control
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
#    index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
#    index.treated <- row.names(data[data$treated == 1, ])
#    index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(y) any(!is.na(y))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
df
Match <- function(data, treated, score, caliper = NULL) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - df$score[data$treated == 0]))
})
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - data$score[data$treated == 0]))
})
#    index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
#    index.treated <- row.names(data[data$treated == 1, ])
#    index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - df$score[data$treated == 0]) <= caliper,
which.min(abs(x - df$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(y) any(!is.na(y))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - data$score[data$treated == 0]))
})
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - data$score[data$treated == 0]))
})
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - data$score[data$treated == 0]))
})
}
df.matched <- Match(data = df, treated = treated, score = propensity)
df.matched
Match <- function(data, treated, score) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - data$score[data$treated == 0]))
})
vec
}
df.matched <- Match(data = df, treated = treated, score = propensity)
df.matched
Match <- function(data, treated, score) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - data$score[data$treated == 0]))
})
print(vec)
}
df.matched <- Match(data = df, treated = treated, score = propensity)
df.matched
Match <- function(data, treated, score) {
sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - data$score[data$treated == 0]))
})
}
df.matched <- Match(data = df, treated = treated, score = propensity)
df.matched
Match <- function(data, treated, propensity) {
sapply(data$propensity[data$treated == 1], function(x) {
which.min(abs(x - data$propensity[data$treated == 0]))
})
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data$score[data$treated == 1], function(x) {
which.min(abs(x - data$score[data$treated == 0]))
})
#    index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
#    index.treated <- row.names(data[data$treated == 1, ])
#    index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - data$score[data$treated == 0]) <= caliper,
which.min(abs(x - data$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(y) any(!is.na(y))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data[data$treated == 1, score], function(x) {
which.min(abs(x - data[data$treated == 0, score]))
})
#    index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
#    index.treated <- row.names(data[data$treated == 1, ])
#    index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - data$score[data$treated == 0]) <= caliper,
which.min(abs(x - data$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(y) any(!is.na(y))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data[data$treated == 1, quote(score)], function(x) {
which.min(abs(x - data[data$treated == 0, quote(score)]))
})
index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
index.treated <- row.names(data[data$treated == 1, ])
index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - data$score[data$treated == 0]) <= caliper,
which.min(abs(x - data$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(y) any(!is.na(y))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data[data$treated == 1, score], function(x) {
which.min(abs(x - data[data$treated == 0, score]))
})
index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
index.treated <- row.names(data[data$treated == 1, ])
index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - data$score[data$treated == 0]) <= caliper,
which.min(abs(x - data$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(y) any(!is.na(y))))
}
}
df.matched <- Match(df, treated, 'propensity')
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data[data$treated == 1, eval(substitute(score), data)], function(x) {
which.min(abs(x - data[data$treated == 0, eval(substitute(score), data)]))
})
index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
index.treated <- row.names(data[data$treated == 1, ])
index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - data$score[data$treated == 0]) <= caliper,
which.min(abs(x - data$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(y) any(!is.na(y))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data[data$treated == 1, substitute(score)], function(x) {
which.min(abs(x - data[data$treated == 0, substitute(score)]))
})
index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
index.treated <- row.names(data[data$treated == 1, ])
index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - data$score[data$treated == 0]) <= caliper,
which.min(abs(x - data$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(y) any(!is.na(y))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(data[data$treated == 1, eval(score)], function(x) {
which.min(abs(x - data[data$treated == 0, eval(score)]))
})
index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
index.treated <- row.names(data[data$treated == 1, ])
index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - data$score[data$treated == 0]) <= caliper,
which.min(abs(x - data$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(y) any(!is.na(y))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
Match <- function(data, treated, score, caliper = NULL) {
if (is.null(caliper)) {
vec <- sapply(eval(substitute(score), data)[data$treated == 1], function(x) {
which.min(abs(x - eval(substitute(score), data)[data$treated == 0]))
})
index.control <- row.names(data[data$treated == 0, ])[unique(vec)]
index.treated <- row.names(data[data$treated == 1, ])
index.control
} else {
mat <- sapply(data$score[data$treated == 1], function(x) {
ifelse(abs(x - data$score[data$treated == 0]) <= caliper,
which.min(abs(x - data$score[data$treated == 0])),
NA)
})
index.control <- unique(unlist(list(mat)))
index.treated <- which(apply(mat, 2, function(y) any(!is.na(y))))
}
}
df.matched <- Match(df, treated, propensity)
df.matched
#!/usr/bin/Rscript --vanilla
# Compiles all .Rmd files in _R directory into .md files in Pages directory, if the input file is older than the output file.
# This script is a modified version of an example here: http://varianceexplained.org/pages/workflow/
rm(list = ls())
site.dir <- '/home/jrl/site/' # Absolute path to site directory
rmd.dir <- '_rmd/' # Relative path to directory containing rmarkdown files
post.dir <- '_posts/' # Relative path to posts directory
img.dir <- 'img/' # Relative path to images directory
setwd(site.dir)
KnitPost <- function(input, outfile, base.url="/") {
require(knitr);
opts_knit$set(base.url = base.url)
fig.path <- paste0(img.dir, sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "")
render_jekyll(highlight = 'pygments')
knit(input, outfile, envir = parent.frame())
}
for (infile in list.files(rmd.dir, pattern="*.Rmd", full.names=TRUE)) {
outfile = paste0(post.dir, Sys.Date(), "-", sub(".Rmd$", ".md", basename(infile)))
# knit only if the input file is the last one modified
if (!file.exists(outfile) | file.info(infile)$mtime > file.info(outfile)$mtime) {
KnitPost(infile, outfile)
}
}
